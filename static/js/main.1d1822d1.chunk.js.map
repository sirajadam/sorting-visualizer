{"version":3,"sources":["components/header/Header.module.css","components/sorting/SortingVisualizer.module.css","components/header/Header.js","components/sorting/SortingVisualizer.js","utility/generateArray.js","algorithms/insertionSort.js","algorithms/bubbleSort.js","algorithms/selectoionSort.js","App.js","index.js"],"names":["module","exports","Header","props","className","styles","nav","SortingVisualizer","arrBarRef","useRef","useState","arrSize","setArrSize","arrSpeed","setArrSpeed","array","setArray","isSorting","setIsSorting","isSorted","setIsSorted","generateNewArray","console","log","max","size","arr","i","x","Math","floor","random","push","generateArray","current","children","length","style","background","useEffect","highlightElementComparison","idx","selectionSort","arrBars","setTimeout","removeHighlight","highlightAnimation","specielCase","comparisonIndex","swappedValues","swap","idx1","val1","idx2","val2","height","j","highlightSuccess","Fragment","ref","map","n","bar","reload","onClick","window","location","disabled","btn","type","min","value","onChange","e","target","range","copy","animeStory","temp","getInsertionAnimation","unsortedArrayLength","getBubbleAnimation","minIdx","getSelectionAnimation","color","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d1822d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3XZsH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sorting-app-container\":\"SortingVisualizer_sorting-app-container__2sLay\",\"bar\":\"SortingVisualizer_bar__7hSyA\",\"sorting-controls-container\":\"SortingVisualizer_sorting-controls-container__1v_fa\",\"sorting-controls\":\"SortingVisualizer_sorting-controls__2x6n9\",\"range\":\"SortingVisualizer_range__1s8kH\",\"size-ctrl\":\"SortingVisualizer_size-ctrl__2YnKl\",\"btn\":\"SortingVisualizer_btn__1p74g\",\"reload\":\"SortingVisualizer_reload__2kynf\",\"MuiSvgIcon-root\":\"SortingVisualizer_MuiSvgIcon-root__2GS1G\"};","import styles from \"./Header.module.css\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <nav className={styles.nav}>\r\n      <h1>Sorting Algorithm Visualizer</h1>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport styles from \"./SortingVisualizer.module.css\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport { generateArray } from \"../../utility/generateArray\";\r\nimport { getInsertionAnimation } from \"../../algorithms/insertionSort\";\r\nimport { getBubbleAnimation } from \"../../algorithms/bubbleSort\";\r\nimport { getSelectionAnimation } from \"../../algorithms/selectoionSort\";\r\n\r\nconst SortingVisualizer = () => {\r\n  const arrBarRef = useRef();\r\n  const [arrSize, setArrSize] = useState(75);\r\n  const [arrSpeed, setArrSpeed] = useState(5);\r\n  const [array, setArray] = useState([50, 40, 30, 20, 10]);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n\r\n  const generateNewArray = () => {\r\n    if (isSorting) {\r\n      console.log(\"ARRAY IS CURRENTLY SORTING\");\r\n      return;\r\n    }\r\n    setArray(generateArray(149, arrSize));\r\n    // Resetting color of array -> refactor when time\r\n    for (let i = 0; i < arrBarRef.current.children.length; i++) {\r\n      arrBarRef.current.children[i].style.background = \"#0ea5e9\";\r\n    }\r\n    setIsSorted(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateNewArray();\r\n  }, [arrSize]);\r\n\r\n  // Sorting algorithms\r\n  const insertionSort = () => {\r\n    highlightAnimation(getInsertionAnimation(array));\r\n  };\r\n\r\n  const bubbleSort = () => {\r\n    highlightAnimation(getBubbleAnimation(array));\r\n  };\r\n  const selectionSort = () => {\r\n    highlightAnimation(getSelectionAnimation(array), true);\r\n  };\r\n\r\n  // End of Sorting algorithms\r\n\r\n  // Highlights arraybar at index idx\r\n  const highlightElementComparison = (idx, selectionSort = false) => {\r\n    const arrBars = arrBarRef.current.children;\r\n\r\n    selectionSort\r\n      ? (arrBars[idx].style.background = \"orangered\")\r\n      : (arrBars[idx].style.background = \"orange\");\r\n\r\n    if (!selectionSort) {\r\n      setTimeout(() => {\r\n        removeHighlight(idx);\r\n      }, arrSpeed);\r\n    }\r\n  };\r\n\r\n  const removeHighlight = (idx) => {\r\n    arrBarRef.current.children[idx].style.background = \"#0ea5e9\";\r\n  };\r\n\r\n  const highlightSuccess = () => {\r\n    const arrBars = arrBarRef.current.children;\r\n\r\n    for (let i = 0; i < arrBars.length; i++) {\r\n      setTimeout(() => {\r\n        arrBars[i].style.background = \"#16A34A\";\r\n      }, (i + 1) * arrSpeed);\r\n    }\r\n  };\r\n\r\n  const highlightAnimation = (arr, specielCase) => {\r\n    // Check if already is sorting\r\n    if (isSorting || isSorted) return;\r\n    setIsSorting(true);\r\n    // Looping through animation array arr\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const [comparisonIndex, swappedValues, swap] = arr[i];\r\n      setTimeout(() => {\r\n        if (!swap) {\r\n          const [i, j] = comparisonIndex;\r\n          highlightElementComparison(i, specielCase);\r\n          highlightElementComparison(j);\r\n        } else {\r\n          const [idx1, val1] = swappedValues[0];\r\n          const [idx2, val2] = swappedValues[1];\r\n          arrBarRef.current.children[idx1].style.height = `${val1 * 5}px`;\r\n          arrBarRef.current.children[idx2].style.height = `${val2 * 5}px`;\r\n          removeHighlight(idx1);\r\n          removeHighlight(idx2);\r\n        }\r\n      }, i * arrSpeed);\r\n      // Setting state in (arr.length * arrSpeed) ms since setTimeout is non-blocking\r\n      setTimeout(() => {\r\n        highlightSuccess();\r\n        setIsSorting(false);\r\n        setIsSorted(true);\r\n      }, arr.length * arrSpeed);\r\n    }\r\n  };\r\n\r\n  // Buttons Control\r\n\r\n  const inputSliderSizeHandler = (e) => {\r\n    setArrSize(e.target.value);\r\n  };\r\n  const inputSliderSpeedHandler = (e) => {\r\n    setArrSpeed(e.target.value);\r\n  };\r\n\r\n  const reloadHandler = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section ref={arrBarRef} className={styles[\"sorting-app-container\"]}>\r\n        {array.map((n, i) => (\r\n          <div\r\n            key={i}\r\n            className={styles.bar}\r\n            style={{ height: `${n * 5}px` }}\r\n          ></div>\r\n        ))}\r\n      </section>\r\n      <section className={styles[\"sorting-controls-container\"]}>\r\n        <div className={styles[\"sorting-controls\"]}>\r\n          {isSorting ? (\r\n            <div className={styles.reload} onClick={reloadHandler}>\r\n              <RefreshIcon />\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          <button\r\n            disabled={isSorting}\r\n            onClick={generateNewArray}\r\n            className={styles.btn}\r\n          >\r\n            Generate\r\n          </button>\r\n          <div className={styles[\"size-ctrl\"]}>\r\n            <label>Size</label>\r\n            <input\r\n              type=\"range\"\r\n              disabled={isSorting}\r\n              min=\"5\"\r\n              max=\"150\"\r\n              value={arrSize}\r\n              onChange={inputSliderSizeHandler}\r\n              className={styles.range}\r\n            />\r\n          </div>\r\n          <div className={styles[\"size-ctrl\"]}>\r\n            <label>Speed (ms)</label>\r\n            <input\r\n              type=\"range\"\r\n              disabled={isSorting}\r\n              min=\"5\"\r\n              max=\"1000\"\r\n              value={arrSpeed}\r\n              onChange={inputSliderSpeedHandler}\r\n              className={styles.range}\r\n            />\r\n          </div>\r\n          <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={insertionSort}\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={bubbleSort}\r\n          >\r\n            Bubble Sort\r\n          </button>\r\n          <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={selectionSort}\r\n          >\r\n            Selection Sort\r\n          </button>\r\n          <p style={{ \"font-size\": \"1.25rem\", color: \"white\" }}>\r\n            Merge Sort coming soon!!\r\n          </p>\r\n          {/* <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={insertionSort}\r\n          >\r\n            Merge Sort\r\n          </button>\r\n          <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={insertionSort}\r\n          >\r\n            Quick Sort\r\n          </button> */}\r\n        </div>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SortingVisualizer;\r\n","export const generateArray = (max, size) => {\r\n  let arr = [];\r\n  for (let i = 0; i < size; i++) {\r\n    let x = Math.floor(Math.random() * (max - 5) + 5);\r\n    arr.push(x);\r\n  }\r\n  return arr;\r\n};\r\n","export const getInsertionAnimation = (arr) => {\r\n  // copy array to not change state\r\n  const copy = [...arr];\r\n  const animeStory = [];\r\n\r\n  for (let i = 0; i < copy.length; i++) {\r\n    let j = i;\r\n    for (j = i; j > 0; j--) {\r\n      animeStory.push([[j, j - 1], null, false]);\r\n      if (copy[j] < copy[j - 1]) {\r\n        animeStory.push([\r\n          null,\r\n          [\r\n            [j - 1, copy[j]],\r\n            [j, copy[j - 1]],\r\n          ],\r\n          true,\r\n        ]);\r\n        let temp = copy[j];\r\n        copy[j] = copy[j - 1];\r\n        copy[j - 1] = temp;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return animeStory;\r\n};\r\n","export const getBubbleAnimation = (arr) => {\r\n  const copy = [...arr];\r\n  const n = copy.length;\r\n  const animeStory = [];\r\n  let unsortedArrayLength = n - 1;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < unsortedArrayLength; j++) {\r\n      // comparison\r\n      animeStory.push([[j, j + 1], null, false]);\r\n      if (copy[j] > copy[j + 1]) {\r\n        //swap\r\n        animeStory.push([\r\n          null,\r\n          [\r\n            [j, copy[j + 1]],\r\n            [j + 1, copy[j]],\r\n          ],\r\n          true,\r\n        ]);\r\n        let temp = copy[j];\r\n        copy[j] = copy[j + 1];\r\n        copy[j + 1] = temp;\r\n      }\r\n    }\r\n    unsortedArrayLength--;\r\n  }\r\n\r\n  return animeStory;\r\n};\r\n","export const getSelectionAnimation = (arr) => {\r\n  const copy = [...arr];\r\n  const n = copy.length;\r\n  const animeStory = [];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let minIdx = i;\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      animeStory.push([[i, j], null, false]);\r\n\r\n      if (copy[minIdx] > copy[j]) {\r\n        minIdx = j;\r\n      }\r\n    }\r\n    animeStory.push([\r\n      null,\r\n      [\r\n        [i, copy[minIdx]],\r\n        [minIdx, copy[i]],\r\n      ],\r\n      true,\r\n    ]);\r\n    let temp = copy[i];\r\n    copy[i] = copy[minIdx];\r\n    copy[minIdx] = temp;\r\n  }\r\n\r\n  return animeStory;\r\n};\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Header from \"./components/header/Header\";\nimport SortingVisualizer from \"./components/sorting/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <SortingVisualizer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}