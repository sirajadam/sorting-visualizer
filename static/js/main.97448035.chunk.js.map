{"version":3,"sources":["components/sorting/SortingVisualizer.module.css","components/header/Header.js","algorithms/selectoionSort.js","components/sorting/SortingVisualizer.js","utility/generateArray.js","algorithms/insertionSort.js","algorithms/bubbleSort.js","App.js","index.js","components/header/Header.module.css"],"names":["module","exports","Header","props","className","styles","nav","getSelectionAnimation","arr","copy","n","length","animeStory","i","minIdx","j","push","temp","console","log","SortingVisualizer","arrBarRef","useRef","useState","arrSize","setArrSize","arrSpeed","setArrSpeed","array","setArray","isSorting","setIsSorting","isSorted","setIsSorted","generateNewArray","max","size","x","Math","floor","random","generateArray","current","children","style","background","useEffect","insertionSort","highlightAnimation","getInsertionAnimation","highlightElementComparison","idx","type","arrBars","setTimeout","comparisonIndex","swappedValues","swap","idx1","val1","idx2","val2","height","highlightSuccess","Fragment","ref","map","bar","reload","onClick","window","location","class","disabled","btn","min","value","onChange","e","target","range","unsortedArrayLength","getBubbleAnimation","App","ReactDOM","render","document","getElementById"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,wBAAwB,iDAAiD,IAAM,+BAA+B,6BAA6B,sDAAsD,mBAAmB,4CAA4C,MAAQ,iCAAiC,YAAY,qCAAqC,IAAM,+BAA+B,OAAS,oC,0JCS3YC,EARA,SAACC,GACd,OACE,qBAAKC,UAAWC,IAAOC,IAAvB,SACE,iE,8BCLOC,EAAwB,SAACC,GAKpC,IAJA,IAAMC,EAAI,YAAOD,GACXE,EAAID,EAAKE,OACTC,EAAa,GAEVC,EAAI,EAAGA,EAAIH,EAAGG,IAAK,CAG1B,IAFA,IAAIC,EAASD,EAEJE,EAAIF,EAAGE,EAAIL,EAAGK,IACrBH,EAAWI,KAAK,CAAC,CAACH,EAAGE,GAAI,MAAM,IAE3BN,EAAKK,GAAUL,EAAKM,KACtBD,EAASC,GAGbH,EAAWI,KAAK,CACd,KACA,CACE,CAACH,EAAGJ,EAAKK,IACT,CAACA,EAAQL,EAAKI,MAEhB,IAEF,IAAII,EAAOR,EAAKI,GAChBJ,EAAKI,GAAKJ,EAAKK,GACfL,EAAKK,GAAUG,EAGjB,OAAOL,GAKTM,QAAQC,IAAIZ,EAFC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KCxBhC,IAmMea,EAnMW,WACxB,IAAMC,EAAYC,mBAClB,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,KAApD,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KAEMC,EAAmB,WACvB,GAAIJ,EACFZ,QAAQC,IAAI,kCADd,CAIAU,ECpByB,SAACM,EAAKC,GAEjC,IADA,IAAI5B,EAAM,GACDK,EAAI,EAAGA,EAAIuB,EAAMvB,IAAK,CAC7B,IAAIwB,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAM,GAAK,GAC/C3B,EAAIQ,KAAKqB,GAEX,OAAO7B,EDcIiC,CAAc,IAAKjB,IAE5B,IAAK,IAAIX,EAAI,EAAGA,EAAIQ,EAAUqB,QAAQC,SAAShC,OAAQE,IACrDQ,EAAUqB,QAAQC,SAAS9B,GAAG+B,MAAMC,WAAa,UAEnDZ,GAAY,KAGda,qBAAU,WACRZ,MACC,CAACV,IAGJ,IAAMuB,EAAgB,WACpBC,EElCiC,SAACxC,GAKpC,IAHA,IAAMC,EAAI,YAAOD,GACXI,EAAa,GAEVC,EAAI,EAAGA,EAAIJ,EAAKE,OAAQE,IAAK,CACpC,IAAIE,EAAIF,EACR,IAAKE,EAAIF,EAAGE,EAAI,IACdH,EAAWI,KAAK,CAAC,CAACD,EAAGA,EAAI,GAAI,MAAM,IAC/BN,EAAKM,GAAKN,EAAKM,EAAI,IAFNA,IAAK,CAGpBH,EAAWI,KAAK,CACd,KACA,CACE,CAACD,EAAI,EAAGN,EAAKM,IACb,CAACA,EAAGN,EAAKM,EAAI,MAEf,IAEF,IAAIE,EAAOR,EAAKM,GAChBN,EAAKM,GAAKN,EAAKM,EAAI,GACnBN,EAAKM,EAAI,GAAKE,GAMpB,OAAOL,EFQcqC,CAAsBrB,KAarCsB,EAA6B,SAACC,EAAKC,GACvC,IAAMC,EAAUhC,EAAUqB,QAAQC,SAElCU,EAAQF,GAAKP,MAAMC,WAAa,SAEhCS,YAAW,WACTD,EAAQF,GAAKP,MAAMC,WAAa,YAC/BnB,IAaCsB,EAAqB,SAACxC,GAE1B,IAAIsB,IAAaE,EAAjB,CACAD,GAAa,GAEb,IALkC,eAKzBlB,GACP,kBAA+CL,EAAIK,GAAnD,GAAO0C,EAAP,KAAwBC,EAAxB,KAAuCC,EAAvC,KACAH,YAAW,WACT,GAAKG,EAIE,CACL,kBAAqBD,EAAc,GAAnC,GAAOE,EAAP,KAAaC,EAAb,KACA,cAAqBH,EAAc,GAAnC,GAAOI,EAAP,KAAaC,EAAb,KACAxC,EAAUqB,QAAQC,SAASe,GAAMd,MAAMkB,OAAvC,UAA0D,EAAPH,EAAnD,MAEAtC,EAAUqB,QAAQC,SAASiB,GAAMhB,MAAMkB,OAAvC,UAA0D,EAAPD,EAAnD,UATS,CACT,kBAAeN,EAAf,GAAO1C,EAAP,KAAUE,EAAV,KACAmC,EAA2BrC,GAC3BqC,EAA2BnC,MAQ5BF,EAAIa,GAEP4B,YAAW,YA/BU,WAGvB,IAFA,IAAMD,EAAUhC,EAAUqB,QAAQC,SADL,WAGpB9B,GACPyC,YAAW,WACTD,EAAQxC,GAAG+B,MAAMC,WAAa,YACzB,EAAJhC,IAHIA,EAAI,EAAGA,EAAIwC,EAAQ1C,OAAQE,IAAM,EAAjCA,GA6BLkD,GACAhC,GAAa,GACbE,GAAY,KACXzB,EAAIG,OAASe,IApBTb,EAAI,EAAGA,EAAIL,EAAIG,OAAQE,IAAM,EAA7BA,KAqCX,OACE,eAAC,IAAMmD,SAAP,WACE,yBAASC,IAAK5C,EAAWjB,UAAWC,IAAO,yBAA3C,SACGuB,EAAMsC,KAAI,SAACxD,EAAGG,GAAJ,OACT,qBAEET,UAAWC,IAAO8D,IAClBvB,MAAO,CAAEkB,OAAO,GAAD,OAAS,EAAJpD,EAAL,QAFVG,QAMX,yBAAST,UAAWC,IAAO,8BAA3B,SACE,sBAAKD,UAAWC,IAAO,oBAAvB,UACGyB,EACC,qBAAK1B,UAAWC,IAAO+D,OAAQC,QAlBnB,WACpBC,OAAOC,SAASH,UAiBR,SACE,mBAAGI,MAAM,yBAGX,GAGF,wBACEC,SAAU3C,EACVuC,QAASnC,EACT9B,UAAWC,IAAOqE,IAHpB,sBAOA,sBAAKtE,UAAWC,IAAO,aAAvB,UACE,yCACA,uBACE+C,KAAK,QACLqB,SAAU3C,EACV6C,IAAI,IACJxC,IAAI,MACJyC,MAAOpD,EACPqD,SA/CmB,SAACC,GAC9BrD,EAAWqD,EAAEC,OAAOH,QA+CVxE,UAAWC,IAAO2E,WAGtB,sBAAK5E,UAAWC,IAAO,aAAvB,UACE,+CACA,uBACE+C,KAAK,QACLqB,SAAU3C,EACV6C,IAAI,IACJxC,IAAI,OACJyC,MAAOlD,EACPmD,SAxDoB,SAACC,GAC/BnD,EAAYmD,EAAEC,OAAOH,QAwDXxE,UAAWC,IAAO2E,WAGtB,wBACEP,SAAU3C,EACV1B,UAAWC,IAAOqE,IAClBL,QAAStB,EAHX,4BAOA,wBACE0B,SAAU3C,EACV1B,UAAWC,IAAOqE,IAClBL,QAtIS,WACjBrB,EGtC8B,SAACxC,GAMjC,IALA,IAAMC,EAAI,YAAOD,GACXE,EAAID,EAAKE,OACTC,EAAa,GACfqE,EAAsBvE,EAAI,EAErBG,EAAI,EAAGA,EAAIH,EAAGG,IAAK,CAC1B,IAAK,IAAIE,EAAI,EAAGA,EAAIkE,EAAqBlE,IAGvC,GADAH,EAAWI,KAAK,CAAC,CAACD,EAAGA,EAAI,GAAI,MAAM,IAC/BN,EAAKM,GAAKN,EAAKM,EAAI,GAAI,CAEzBH,EAAWI,KAAK,CACd,KACA,CACE,CAACD,EAAGN,EAAKM,EAAI,IACb,CAACA,EAAI,EAAGN,EAAKM,MAEf,IAEF,IAAIE,EAAOR,EAAKM,GAChBN,EAAKM,GAAKN,EAAKM,EAAI,GACnBN,EAAKM,EAAI,GAAKE,EAGlBgE,IAGF,OAAOrE,EHUcsE,CAAmBtD,KAkIhC,yBAOA,wBACE6C,SAAU3C,EACV1B,UAAWC,IAAOqE,IAClBL,QA1IY,WACpBrB,EAAmBzC,EAAsBqB,KAsInC,4BAOA,wBACE6C,SAAU3C,EACV1B,UAAWC,IAAOqE,IAClBL,QAAStB,EAHX,wBAOA,wBACE0B,SAAU3C,EACV1B,UAAWC,IAAOqE,IAClBL,QAAStB,EAHX,iCI/KKoC,MATf,WACE,OACE,eAAC,IAAMnB,SAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,QCJNoB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U,kBCJjDvF,EAAOC,QAAU,CAAC,IAAM,uB","file":"static/js/main.97448035.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sorting-app-container\":\"SortingVisualizer_sorting-app-container__2sLay\",\"bar\":\"SortingVisualizer_bar__7hSyA\",\"sorting-controls-container\":\"SortingVisualizer_sorting-controls-container__1v_fa\",\"sorting-controls\":\"SortingVisualizer_sorting-controls__2x6n9\",\"range\":\"SortingVisualizer_range__1s8kH\",\"size-ctrl\":\"SortingVisualizer_size-ctrl__2YnKl\",\"btn\":\"SortingVisualizer_btn__1p74g\",\"reload\":\"SortingVisualizer_reload__2kynf\"};","import styles from \"./Header.module.css\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <nav className={styles.nav}>\r\n      <h1>Sorting Algorithm Visualizer</h1>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const getSelectionAnimation = (arr) => {\r\n  const copy = [...arr];\r\n  const n = copy.length;\r\n  const animeStory = [];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let minIdx = i;\r\n\r\n    for (let j = i; j < n; j++) {\r\n      animeStory.push([[i, j], null, false]);\r\n\r\n      if (copy[minIdx] > copy[j]) {\r\n        minIdx = j;\r\n      }\r\n    }\r\n    animeStory.push([\r\n      null,\r\n      [\r\n        [i, copy[minIdx]],\r\n        [minIdx, copy[i]],\r\n      ],\r\n      true,\r\n    ]);\r\n    let temp = copy[i];\r\n    copy[i] = copy[minIdx];\r\n    copy[minIdx] = temp;\r\n  }\r\n\r\n  return animeStory;\r\n};\r\n\r\nconst test = [4, 5, 7, 1, 3, 6, 9];\r\n\r\nconsole.log(getSelectionAnimation(test));\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport styles from \"./SortingVisualizer.module.css\";\r\nimport { generateArray } from \"../../utility/generateArray\";\r\nimport { getInsertionAnimation } from \"../../algorithms/insertionSort\";\r\nimport { getBubbleAnimation } from \"../../algorithms/bubbleSort\";\r\nimport { getSelectionAnimation } from \"../../algorithms/selectoionSort\";\r\n\r\nconst SortingVisualizer = () => {\r\n  const arrBarRef = useRef();\r\n  const [arrSize, setArrSize] = useState(75);\r\n  const [arrSpeed, setArrSpeed] = useState(5);\r\n  const [array, setArray] = useState([50, 40, 30, 20, 10]);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n\r\n  const generateNewArray = () => {\r\n    if (isSorting) {\r\n      console.log(\"ARRAY IS CURRENTLY SORTING\");\r\n      return;\r\n    }\r\n    setArray(generateArray(149, arrSize));\r\n    // Resetting color of array -> refactor when time\r\n    for (let i = 0; i < arrBarRef.current.children.length; i++) {\r\n      arrBarRef.current.children[i].style.background = \"#0ea5e9\";\r\n    }\r\n    setIsSorted(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateNewArray();\r\n  }, [arrSize]);\r\n\r\n  // Sorting algorithms\r\n  const insertionSort = () => {\r\n    highlightAnimation(getInsertionAnimation(array));\r\n  };\r\n\r\n  const bubbleSort = () => {\r\n    highlightAnimation(getBubbleAnimation(array));\r\n  };\r\n  const selectionSort = () => {\r\n    highlightAnimation(getSelectionAnimation(array));\r\n  };\r\n\r\n  // End of Sorting algorithms\r\n\r\n  // Highlights arraybar at index idx\r\n  const highlightElementComparison = (idx, type) => {\r\n    const arrBars = arrBarRef.current.children;\r\n\r\n    arrBars[idx].style.background = \"orange\";\r\n\r\n    setTimeout(() => {\r\n      arrBars[idx].style.background = \"#0ea5e9\";\r\n    }, arrSpeed);\r\n  };\r\n\r\n  const highlightSuccess = () => {\r\n    const arrBars = arrBarRef.current.children;\r\n\r\n    for (let i = 0; i < arrBars.length; i++) {\r\n      setTimeout(() => {\r\n        arrBars[i].style.background = \"#16A34A\";\r\n      }, i * 3);\r\n    }\r\n  };\r\n\r\n  const highlightAnimation = (arr) => {\r\n    // Check if already is sorting\r\n    if (isSorting || isSorted) return;\r\n    setIsSorting(true);\r\n    // Looping through animation array arr\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const [comparisonIndex, swappedValues, swap] = arr[i];\r\n      setTimeout(() => {\r\n        if (!swap) {\r\n          const [i, j] = comparisonIndex;\r\n          highlightElementComparison(i);\r\n          highlightElementComparison(j);\r\n        } else {\r\n          const [idx1, val1] = swappedValues[0];\r\n          const [idx2, val2] = swappedValues[1];\r\n          arrBarRef.current.children[idx1].style.height = `${val1 * 5}px`;\r\n\r\n          arrBarRef.current.children[idx2].style.height = `${val2 * 5}px`;\r\n        }\r\n      }, i * arrSpeed);\r\n      // Setting state in (arr.length * arrSpeed) ms since setTimeout is non-blocking\r\n      setTimeout(() => {\r\n        highlightSuccess();\r\n        setIsSorting(false);\r\n        setIsSorted(true);\r\n      }, arr.length * arrSpeed);\r\n    }\r\n  };\r\n\r\n  // Buttons Control\r\n\r\n  const inputSliderSizeHandler = (e) => {\r\n    setArrSize(e.target.value);\r\n  };\r\n  const inputSliderSpeedHandler = (e) => {\r\n    setArrSpeed(e.target.value);\r\n  };\r\n\r\n  const reloadHandler = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section ref={arrBarRef} className={styles[\"sorting-app-container\"]}>\r\n        {array.map((n, i) => (\r\n          <div\r\n            key={i}\r\n            className={styles.bar}\r\n            style={{ height: `${n * 5}px` }}\r\n          ></div>\r\n        ))}\r\n      </section>\r\n      <section className={styles[\"sorting-controls-container\"]}>\r\n        <div className={styles[\"sorting-controls\"]}>\r\n          {isSorting ? (\r\n            <div className={styles.reload} onClick={reloadHandler}>\r\n              <i class=\"fi-rr-rotate-right\"></i>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          <button\r\n            disabled={isSorting}\r\n            onClick={generateNewArray}\r\n            className={styles.btn}\r\n          >\r\n            Generate\r\n          </button>\r\n          <div className={styles[\"size-ctrl\"]}>\r\n            <label>Size</label>\r\n            <input\r\n              type=\"range\"\r\n              disabled={isSorting}\r\n              min=\"5\"\r\n              max=\"150\"\r\n              value={arrSize}\r\n              onChange={inputSliderSizeHandler}\r\n              className={styles.range}\r\n            />\r\n          </div>\r\n          <div className={styles[\"size-ctrl\"]}>\r\n            <label>Speed (ms)</label>\r\n            <input\r\n              type=\"range\"\r\n              disabled={isSorting}\r\n              min=\"5\"\r\n              max=\"1000\"\r\n              value={arrSpeed}\r\n              onChange={inputSliderSpeedHandler}\r\n              className={styles.range}\r\n            />\r\n          </div>\r\n          <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={insertionSort}\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={bubbleSort}\r\n          >\r\n            Bubble Sort\r\n          </button>\r\n          <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={selectionSort}\r\n          >\r\n            Selection Sort\r\n          </button>\r\n          <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={insertionSort}\r\n          >\r\n            Merge Sort\r\n          </button>\r\n          <button\r\n            disabled={isSorting}\r\n            className={styles.btn}\r\n            onClick={insertionSort}\r\n          >\r\n            Quick Sort\r\n          </button>\r\n        </div>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SortingVisualizer;\r\n","export const generateArray = (max, size) => {\r\n  let arr = [];\r\n  for (let i = 0; i < size; i++) {\r\n    let x = Math.floor(Math.random() * (max - 5) + 5);\r\n    arr.push(x);\r\n  }\r\n  return arr;\r\n};\r\n","export const getInsertionAnimation = (arr) => {\r\n  // copy array to not change state\r\n  const copy = [...arr];\r\n  const animeStory = [];\r\n\r\n  for (let i = 0; i < copy.length; i++) {\r\n    let j = i;\r\n    for (j = i; j > 0; j--) {\r\n      animeStory.push([[j, j - 1], null, false]);\r\n      if (copy[j] < copy[j - 1]) {\r\n        animeStory.push([\r\n          null,\r\n          [\r\n            [j - 1, copy[j]],\r\n            [j, copy[j - 1]],\r\n          ],\r\n          true,\r\n        ]);\r\n        let temp = copy[j];\r\n        copy[j] = copy[j - 1];\r\n        copy[j - 1] = temp;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return animeStory;\r\n};\r\n","export const getBubbleAnimation = (arr) => {\r\n  const copy = [...arr];\r\n  const n = copy.length;\r\n  const animeStory = [];\r\n  let unsortedArrayLength = n - 1;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < unsortedArrayLength; j++) {\r\n      // comparison\r\n      animeStory.push([[j, j + 1], null, false]);\r\n      if (copy[j] > copy[j + 1]) {\r\n        //swap\r\n        animeStory.push([\r\n          null,\r\n          [\r\n            [j, copy[j + 1]],\r\n            [j + 1, copy[j]],\r\n          ],\r\n          true,\r\n        ]);\r\n        let temp = copy[j];\r\n        copy[j] = copy[j + 1];\r\n        copy[j + 1] = temp;\r\n      }\r\n    }\r\n    unsortedArrayLength--;\r\n  }\r\n\r\n  return animeStory;\r\n};\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Header from \"./components/header/Header\";\nimport SortingVisualizer from \"./components/sorting/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <SortingVisualizer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3XZsH\"};"],"sourceRoot":""}